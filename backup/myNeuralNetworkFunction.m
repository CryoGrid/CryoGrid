function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-Dec-2020 21:12:30.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-10;-10];
x1_step1.gain = [0.1;0.1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5487018874760056786;-14.805715685530614678;-3.3963141676939092584;-5.5870919533730782902;-0.50459955277930312878;-2.6371595938534908576;0.88079111528926823382;-0.8193633543196716662;1.25880421098350892;2.4361630061205628017;0.79477409119896580414;0.39565261394464112943;-4.8194771002798466597;1.4327131888546209559;1.1283352682855576354];
IW1_1 = [-2.0953944702330669081 -0.011950551679408779465;3.7753366884028443096 -0.8183609378863251349;7.5468120644524105955 -3.3253630793756010497;3.411289523759332809 -5.9790777826067476042;0.1780170535349279437 -6.4229920764661674326;6.1933649603742146894 -3.1490446341171267619;-1.5088338166163794973 -0.0043768497346652153121;2.1749508783460447248 6.3664275868246864576;-13.410150343605916845 0.050755544540612089477;3.4759062797564239666 -5.588233730799505139;0.031559394202280016684 -2.7133717382376052463;0.0098137632173958058712 0.28534584285027386752;-3.996190338311357948 -6.4386183981219131667;-8.5775476751798058182e-05 0.74925742430814479267;0.0027103222033029701968 -0.54401771660207143277];

% Layer 2
b2 = 10.73116542145076302;
LW2_1 = [-0.029084079526991671316 -7.4922443002047245386 0.0015063658829193369952 -6.7790349674124711203e-05 -0.0013736070015448458449 -0.0016004551837426126814 -0.055008310295251161559 2.2072245189192084736e-05 -0.0069244912820898675901 -0.00016989524674446181618 -0.012485841947973013583 -6.6311844802904698071 7.3184435150639015198e-06 -6.2690985832978407544 -13.690130294872977501];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0196879667551634;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
